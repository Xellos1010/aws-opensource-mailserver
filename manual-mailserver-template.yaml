# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

Description: Deploy Mail-in-a-box on EC2. Both new installs and restore from S3 Backups are supported with this template
Parameters:
  MailInABoxDomain:
    Description: DNS Domain to host emails for
    Type: String
  InstanceEIP:
    Description: Elastic IP of Instance
    Type: String
    Default: ''
  BackupS3Bucket:
    Description: S3 bucket to use for backups
    Type: String
  NextCloudS3Bucket:
    Description: S3 bucket to use for nextcloud data
    Default: ''
    Type: String
  KeyName:
    Description: 'Mandatory: Name of an existing EC2 key pair to enable SSH access to the instance'
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    ConstraintDescription: must be a valid EC2 instance type.
  InstanceAMI:
    Description: Managed AMI ID for EC2 Instance
    Type : AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: '/aws/service/canonical/ubuntu/server/jammy/stable/current/amd64/hvm/ebs-gp2/ami-id'
  InstanceDns:
    Description: DNS name of Instance (within the 'MailInABoxDomain') 
    Type: String
    Default: box
  MailInABoxVersion:
    Type: String
    Default: aws
  MailInABoxCloneUrl:
    Type: String
    Default: https://github.com/mmeidlinger/mailinabox
  MailInABoxAdminPassword:
    Type: String
    NoEcho: true
    Default: ''
  RestoreKey:
    Description: Key to decrypt Backup. Leave empty in case of using a newly generated one for new installs
    Type: String
    Default: ''
    NoEcho: true
  RestoreKeySsmParameterName:
    Description: Name of SSM Parameter where to save the Restore Key. Key not saved to Ssm in case this is left empty
    Default: 'MailInABoxRestoreKey'
    Type: String
  RestorePrefix:
    Description: Prefix where backups that are to be restored are located in S3 bucket. Leave empty for a fresh install
    Default: ''
    Type: String
  SesRelay:
    Description: Set to 'false' if you do not want to configure SES to relay your Emails
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
  SmtpIamAccessKeyVersion:
    Type: Number
    Default: 1
    Description: Version number of the AWS access keys used to generate SMTP Credentials. Increment this number to rotate the keys. New keys are not automatically provisioned on the Mail-in-a-Box instance.
    MinValue: 1

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "Enter your parameters"
        Parameters: 
          - MailInABoxDomain
          - InstanceEIP
          - BackupS3Bucket
          - NextCloudS3Bucket
          - KeyName
          - InstanceType
          - InstanceAMI
          - RestorePrefix
          - RestoreKeySsmParameterName

Conditions:
  InstaceEIPProvided:
    !Not [!Equals [!Ref 'InstanceEIP', '']]
  NextCloudS3:
    !Not [!Equals [!Ref 'NextCloudS3Bucket', '']]
  UseSesRelay:
    !Equals [!Ref 'SesRelay', 'true']
  RestoreKeyinSsmParameter:
    !Not [!Equals [!Ref 'RestoreKeySsmParameterName', '']]
  NewAdminPasswordToSsm:
    !And [ !Equals [!Ref 'MailInABoxAdminPassword', ''], !Equals [!Ref 'RestorePrefix', ''] ]

    
Resources:
  InstanceEIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Condition: InstaceEIPProvided
    Properties: 
      EIP: !Ref InstanceEIP
      InstanceId: !Ref EC2Instance

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Mail-in-a-box Instance
      GroupName: !Sub MailInABoxSecurityGroup-${AWS::StackName}
      SecurityGroupIngress:
      - IpProtocol: tcp
        Description: 'SSH'
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        Description: 'DNS (TCP)'
        FromPort: 53
        ToPort: 53
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        Description: 'DNS (UDP)'
        FromPort: 53
        ToPort: 53
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        Description: 'HTTP'
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        Description: 'HTTPS'
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        Description: 'SMTP (STARTTLS)'
        FromPort: 25
        ToPort: 25
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        Description: 'IMAP (STARTTLS)'
        FromPort: 143
        ToPort: 143
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        Description: 'IMAPS'
        FromPort: 993
        ToPort: 993
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        Description: 'SMTPS'
        FromPort: 465
        ToPort: 465
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        Description: 'SMTP Submission'
        FromPort: 587
        ToPort: 587
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        Description: 'Sieve Mail filtering'
        FromPort: 4190
        ToPort: 4190
        CidrIp: 0.0.0.0/0
  
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub MailInABoxInstanceRole-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: BackupS3BucketAccessMIAB
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub arn:aws:s3:::${BackupS3Bucket}/*
                  - !Sub arn:aws:s3:::${BackupS3Bucket}
        - !If
          - NextCloudS3
          - PolicyName: NextCloudS3Policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:*
                  Resource:
                    - !Sub arn:aws:s3:::${NextCloudS3Bucket}/*
                    - !Sub arn:aws:s3:::${NextCloudS3Bucket}
          - !Ref AWS::NoValue
        - !If
          - UseSesRelay
          - PolicyName: SsmParameterAccessSmtpCredentials
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - ssm:GetParameter
                  Resource:
                    - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/smtp-username-${AWS::StackName}"
                    - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/smtp-password-${AWS::StackName}"
          - !Ref AWS::NoValue
        - !If
          - RestoreKeyinSsmParameter
          - PolicyName: SsmParameterAccessRestoreKey
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - ssm:PutParameter
                    - ssm:GetParameter
                  Resource:
                    - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${RestoreKeySsmParameterName}"
                - Effect: Allow
                  Action:
                    - ssm:DescribeParameters
                  Resource: '*'
          - !Ref AWS::NoValue  
        - !If
          - NewAdminPasswordToSsm
          - PolicyName: SsmParameterAccessMailInABoxAdminPassword
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - ssm:PutParameter
                  Resource:
                    - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/MailInABoxAdminPassword"
          - !Ref AWS::NoValue  

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: !Sub MailInABoxInstanceProfile-${AWS::StackName}
      Roles: 
       - !Ref InstanceRole

  MailInABoxAdminPasswordSsmParameter:
    Condition: NewAdminPasswordToSsm
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /MailInABoxAdminPassword-${AWS::StackName}
      Type: String
      Value: DefaultToBeUpdatedByInstaller
      Description: Initial admin Password for Mail-in-a-box WebUI

  EC2Instance:
    Type: AWS::EC2::Instance
    DependsOn: SmtpCredentialsWaitCondition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
        Count: 1
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !Ref InstanceAMI
      IamInstanceProfile: !Ref InstanceProfile
      SecurityGroups: 
        - !Ref InstanceSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            VolumeSize: 8
            DeleteOnTermination: true
            Encrypted: true
      Tags:
        - Key: Name
          Value: !Sub MailInABoxInstance-${AWS::StackName}
        - Key: ASKDAOKAPRA
          Value: MAILSERVERS
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          LOGFILE="/var/log/mailinabox_setup.log"
          echo "Starting Mail-in-a-Box setup..." | tee -a $LOGFILE | logger -t mailinabox_setup
          exec > >(tee -a $LOGFILE | logger -t mailinabox_setup) 2>&1
          logger "Starting Mail-in-a-Box setup."

          # Configure needrestart to auto-handle restarts
          echo "Updating package lists..." | tee -a $LOGFILE | logger -t mailinabox_setup
          apt-get update
          echo "Upgrading installed packages..." | tee -a $LOGFILE | logger -t mailinabox_setup
          apt-get upgrade -o DPkg::Lock::Timeout=120 -y  

          # Install missing package (dialog) first
          echo "Installing missing package: dialog..." | tee -a $LOGFILE | logger -t mailinabox_setup
          apt-get install -y dialog

          # Pre-Install
          echo "Installing dependencies..." | tee -a $LOGFILE | logger -t mailinabox_setup
          apt-get install -o DPkg::Lock::Timeout=120 -y \
            librsync-dev \
            python3-setuptools \
            python3-pip \
            python3-boto3 \
            unzip \
            intltool \
            python-is-python3

          # pip3 install duplicity==1.0.1

          # Install awscli and CloudFormation helper scripts
          echo "Installing AWS CLI..." | tee -a $LOGFILE | logger -t mailinabox_setup
          cd /tmp
          curl "https://awscli.amazonaws.com/awscli-exe-linux-$(uname -m).zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
          pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz

          # Configure variables
          echo "Configuring environment variables..." | tee -a $LOGFILE | logger -t mailinabox_setup
          # export NONINTERACTIVE=true
          export NONINTERACTIVE=1
          # added to remove tty-output error.
          export DEBIAN_FRONTEND=noninteractive
          export TERM=xterm  # Ensures dialog has a terminal interface

          export SKIP_NETWORK_CHECKS=true
          export STORAGE_ROOT=/home/user-data
          export STORAGE_USER=user-data
          export PRIVATE_IP=$(ec2metadata --local-ipv4)
          export PUBLIC_IP=$(ec2metadata --public-ipv4)

          export PRIMARY_HOSTNAME=${InstanceDns}.${MailInABoxDomain}

          export DEFAULT_PRIMARY_HOSTNAME=${InstanceDns}.${MailInABoxDomain}
          export DEFAULT_PUBLIC_IP=$(ec2metadata --public-ipv4)

          # Setup Admin Account
          echo "Setting up admin account..." | tee -a $LOGFILE | logger -t mailinabox_setup
          export EMAIL_ADDR=admin@${MailInABoxDomain}
          if [[ -z "${MailInABoxAdminPassword}" ]]; then
            export EMAIL_PW=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 16 ; echo '')
            if [[ -z "${RestorePrefix}" ]]; then
              aws ssm put-parameter \
                  --overwrite \
                  --name "/MailInABoxAdminPassword-${AWS::StackName}" \
                  --type SecureString \
                  --value "$EMAIL_PW"
            fi
          else
            export EMAIL_PW=${MailInABoxAdminPassword}
          fi

          # Pre-installation steps
          echo "Creating user and setting up directories..." | tee -a $LOGFILE | logger -t mailinabox_setup
          useradd -m $STORAGE_USER
          mkdir -p $STORAGE_ROOT
          git clone ${MailInABoxCloneUrl} /opt/mailinabox
          export TAG=${MailInABoxVersion}
          cd /opt/mailinabox && git checkout $TAG

          # Restore if applicable
          if [[ -n "${RestorePrefix}" ]]; then
            echo "Restoring from S3 backup..." | tee -a $LOGFILE | logger -t mailinabox_setup
            duplicity restore --force "s3://${BackupS3Bucket}/${RestorePrefix}" $STORAGE_ROOT
            mkdir -p $STORAGE_ROOT/backup
          fi

          # Install Mail-in-a-Box
          echo "Running Mail-in-a-Box setup script..." | tee -a $LOGFILE | logger -t mailinabox_setup
          cd /opt/mailinabox/ 
          ## && setup/start.sh && 
          # Run the setup script with debug logging
          bash -x setup/start.sh 2>&1 | tee /tmp/mailinabox_debug.log

          # Post-installation steps
          echo "Configuring DNS settings..." | tee -a $LOGFILE | logger -t mailinabox_setup
          INTERFACE=$(ip route list | grep default | grep -E  'dev (\w+)' -o | awk '{print $2}')
          cat <<EOT > /etc/netplan/99-custom-dns.yaml
          network:
            version: 2
            ethernets:
                $INTERFACE:         
                  nameservers:
                    addresses: [127.0.0.1]
                  dhcp4-overrides:
                    use-dns: false
          EOT
          netplan apply

          # Remove existing duplicity installation if any
          echo "Removing existing duplicity installation..." | tee -a $LOGFILE | logger -t mailinabox_setup
          apt-get remove -y duplicity || true
          rm -rf /etc/apt/sources.list.d/duplicity-team-ubuntu-duplicity-release-git-jammy.list || true
          apt-get update

          # Install duplicity via Snap
          echo "Installing duplicity via Snap..." | tee -a $LOGFILE | logger -t mailinabox_setup
          snap install duplicity --classic
          which duplicity
          # Create a symlink to /usr/bin/duplicity
          echo "Creating symlink for duplicity..." | tee -a $LOGFILE | logger -t mailinabox_setup
          ln -sf /snap/bin/duplicity /usr/bin/duplicity
          which duplicity
          # Block duplicity from being installed via apt
          echo "Blocking duplicity from being installed via apt..." | tee -a $LOGFILE | logger -t mailinabox_setup
          echo -e "Package: duplicity\nPin: release *\nPin-Priority: -1" > /etc/apt/preferences.d/duplicity

          # Verify duplicity installation
          echo "Verifying duplicity installation..." | tee -a $LOGFILE | logger -t mailinabox_setup
          duplicity --version

          # Create Initial Backup
          echo "Creating initial backup..." | tee -a $LOGFILE | logger -t mailinabox_setup
          /opt/mailinabox/management/backup.py

          # Fetch the EC2 Instance ID
          INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
          echo "Instance ID: $INSTANCE_ID"

          # Clear logs for security
          echo "Clearing logs of sensitive data..." | tee -a $LOGFILE | logger -t mailinabox_setup

          for file in /var/lib/cloud/instances/$INSTANCE_ID/scripts/part-00* \
                      /var/lib/cloud/instances/$INSTANCE_ID/user-data.txt* \
                      /var/lib/cloud/instances/$INSTANCE_ID/obj.pkl; do
              if [ -e "$file" ]; then
                  rm -f "$file"
                  echo "Deleted: $file"
              else
                  echo "File not found: $file"
              fi
          done

          # Signal success to CloudFormation
          echo "Signaling CloudFormation completion..." | tee -a $LOGFILE | logger -t mailinabox_setup
          /usr/local/bin/cfn-signal --success true --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region}

          # Reboot
          echo "Rebooting system..." | tee -a $LOGFILE | logger -t mailinabox_setup
          reboot

  SmtpCredentialsWaitHandleUnconditional: 
    Type: "AWS::CloudFormation::WaitConditionHandle"

  SmtpCredentialsWaitHandleConditional: 
    Condition: UseSesRelay
    DependsOn: SmtpPassword
    Type: "AWS::CloudFormation::WaitConditionHandle"

  SmtpCredentialsWaitCondition: 
    Type: "AWS::CloudFormation::WaitCondition"
    Properties: 
      Handle: !If [UseSesRelay, !Ref SmtpCredentialsWaitHandleConditional, !Ref SmtpCredentialsWaitHandleUnconditional]
      Timeout: "1"
      Count: 0

  SmtpUserGroup:
    Condition: UseSesRelay
    Type: AWS::IAM::Group
    Properties:
      GroupName: !Sub SMTPUserGroup-${AWS::StackName}
  SmtpUser:
    Condition: UseSesRelay
    Type: AWS::IAM::User
    Properties:
      UserName: !Sub SMTPUser-${AWS::StackName}
      Groups:
        - !Ref SmtpUserGroup
  SmtpUserPolicy:
    Condition: UseSesRelay
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub SMTPUserPolicy-${AWS::StackName}
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: ses:SendRawEmail
            Resource: '*'
            Condition: 
              StringLike:
                'ses:FromAddress': !Sub '*@${MailInABoxDomain}'
      Groups:
        - !Ref SmtpUserGroup
  SmtpUserAccessKey:
    Condition: UseSesRelay
    Type: AWS::IAM::AccessKey
    Properties:
      Serial: !Ref SmtpIamAccessKeyVersion
      Status: Active
      UserName: !Ref SmtpUser

  SmtpPassword:
    Condition: UseSesRelay
    DependsOn: SmtpUsername
    Type: Custom::SmtpPassword
    Properties:
      ServiceToken: !GetAtt SmtpLambdaFunction.Arn
      Key: !GetAtt SmtpUserAccessKey.SecretAccessKey
      ParameterType: password

  SmtpUsername:
    Condition: UseSesRelay
    Type: Custom::SmtpUsername
    Properties:
      ServiceToken: !GetAtt SmtpLambdaFunction.Arn
      Key: !Ref SmtpUserAccessKey
      ParameterType: username

  SmtpLambdaExecutionRole:
    Condition: UseSesRelay
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub SMTPLambdaExecutionRole-${AWS::StackName}
      Description: Role assumed by Lambda to generate SMTP credentials
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: InlineSMTPLambdaExecutionRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:DeleteParameter
                Resource:
                  - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/smtp-username-${AWS::StackName}"
                  - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/smtp-password-${AWS::StackName}"

  SmtpLambdaFunction:
    Condition: UseSesRelay
    Type: AWS::Lambda::Function
    Properties:
      Description: Generates SMTP credentials and stores in Parameter Store
      FunctionName: !Sub SMTPCredentialsLambdaFunction-${AWS::StackName}
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt SmtpLambdaExecutionRole.Arn
      Runtime: python3.8
      Timeout: 30
      Code:
        ZipFile: !Sub |
          import hmac
          import hashlib
          import base64
          import argparse
          import boto3
          from botocore.exceptions import ClientError
          import json
          import cfnresponse
          import urllib3
          import logging
          import os

          logging.basicConfig(level=logging.DEBUG)
          log = logging.getLogger(__name__)
          region = os.environ['AWS_REGION']
          ssm = boto3.client('ssm',region_name=region)

          SMTP_REGIONS = [
              'us-east-2',       # US East (Ohio)
              'us-east-1',       # US East (N. Virginia)
              'us-west-2',       # US West (Oregon)
              'ap-south-1',      # Asia Pacific (Mumbai)
              'ap-northeast-2',  # Asia Pacific (Seoul)
              'ap-southeast-1',  # Asia Pacific (Singapore)
              'ap-southeast-2',  # Asia Pacific (Sydney)
              'ap-northeast-1',  # Asia Pacific (Tokyo)
              'ca-central-1',    # Canada (Central)
              'eu-central-1',    # Europe (Frankfurt)
              'eu-west-1',       # Europe (Ireland)
              'eu-west-2',       # Europe (London)
              'sa-east-1',       # South America (Sao Paulo)
              'us-gov-west-1',   # AWS GovCloud (US)
          ]

          # These values are required to calculate the signature. Do not change them.
          DATE = "11111111"
          SERVICE = "ses"
          MESSAGE = "SendRawEmail"
          TERMINAL = "aws4_request"
          VERSION = 0x04

          def sign(key, msg):
              return hmac.new(key, msg.encode('utf-8'), hashlib.sha256).digest()

          def calculate_key(secret_access_key, region):
              if region not in SMTP_REGIONS:
                  raise ValueError(f"The {region} Region doesn't have an SMTP endpoint.")

              signature = sign(("AWS4" + secret_access_key).encode('utf-8'), DATE)
              signature = sign(signature, region)
              signature = sign(signature, SERVICE)
              signature = sign(signature, TERMINAL)
              signature = sign(signature, MESSAGE)
              signature_and_version = bytes([VERSION]) + signature
              smtp_password = base64.b64encode(signature_and_version)
              return smtp_password.decode('utf-8')

          def put_parameter(value,type):
            try:
              ssm.put_parameter(
                      Name='smtp-' + type + '-${AWS::StackName}',
                      Description='SMTP '+type+' for email communications',
                      Value=value,
                      Type='SecureString',
                      Overwrite=True,
                      Tier='Standard'
                  )
              return True
            except Exception as e:
              print("Error putting parameter smtp-"+type+"-${AWS::StackName}: "+str(e))
              return False

          def delete_smtp_credentials(type):
            try:
              ssm.delete_parameter(Name='smtp-'+type+'-${AWS::StackName}')
              return True
            except Exception as e:
              print("Error deleting parameter smtp-"+type+"-${AWS::StackName}: "+str(e))
              return False


          def lambda_handler(event, context):
            log.debug('%s', event)
            parameter_type = event['ResourceProperties']['ParameterType']
            parameter_arn = "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/smtp-"+parameter_type+"-${AWS::StackName}"
            key = event['ResourceProperties']['Key']
            proceed = "True"

            if event['RequestType'] == 'Create':
              if parameter_type == 'username':
                proceed = put_parameter(key, parameter_type)
              elif parameter_type == 'password':
                pwd = calculate_key(key, region)
                proceed = put_parameter(pwd, parameter_type)
              reason = "Created SMTP "+parameter_type
            elif event['RequestType'] == 'Update':
              if parameter_type == 'username':
                proceed = put_parameter(key, parameter_type)
              elif parameter_type == 'password':
                pwd = calculate_key(key, region)
                proceed = put_parameter(pwd, parameter_type)
              reason = "Updated SMTP "+parameter_type
            elif event['RequestType'] == 'Delete':
              proceed = delete_smtp_credentials(parameter_type)
              reason = "Deleted SMTP "+parameter_type
            else:
              proceed = False
              reason = "Operation %s is unsupported" % (event['RequestType'])

            if proceed:
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {'Reason': reason}, parameter_arn)
            else:
              cfnresponse.send(event, context, cfnresponse.FAILED, {'Reason': reason}, parameter_arn)

Outputs:
  InstancePublicIp:
    Description: The Public IP of the Mail-in-a-box instance
    Value: !GetAtt EC2Instance.PublicIp
  AdminPassword:
    Description: Name of the SSM Parameter containing the Admin Password to Mail-in-a-box Web-UI
    Condition: NewAdminPasswordToSsm
    Value: !Ref MailInABoxAdminPasswordSsmParameter
  RestorePrefix:
    Description: The S3 prefix where backups are stored is set to the ID of the EC2 instance of your current deployment
    Value: !Ref EC2Instance 